"""
Python Test Cases

All your test files should be inside a folder tests
All your test files should be text files (extension: .txt)
All your tests should be executed by using this command: python3 -m doctest ./tests/*
All your modules should have a documentation (python3 -c 'print(__import__("my_module").__doc__)')
All your classes should have a documentation (python3 -c 'print(__import__("my_module").MyClass.__doc__)')
All your functions (inside and outside a class) should have a documentation (python3 -c 'print(__import__("my_module").my_function.__doc__)' and python3 -c 'print(__import__("my_module").MyClass.my_function.__doc__)')
A documentation is not a simple word, it’s a real sentence explaining what’s the purpose of the module, class or method (the length of it will be verified)
We strongly encourage you to work together on test cases so that you don’t miss any edge case

Test Case - 7-main.py
"""

BaseGeometry = __import__('7-base_geometry').BaseGeometry

bg = BaseGeometry()

# Test case 1: Valid integer value
bg.integer_validator("my_int", 12)

# Test case 2: Valid integer value
bg.integer_validator("width", 89)

# Test case 3: Invalid value - not an integer
try:
    bg.integer_validator("name", "John")
except Exception as e:
    print("[{}] {}".format(e.__class__.__name__, e))

# Test case 4: Invalid value - less than or equal to 0
try:
    bg.integer_validator("age", 0)
except Exception as e:
    print("[{}] {}".format(e.__class__.__name__, e))

# Test case 5: Invalid value - less than or equal to 0
try:
    bg.integer_validator("distance", -4)
except Exception as e:
    print("[{}] {}".format(e.__class__.__name__, e))
